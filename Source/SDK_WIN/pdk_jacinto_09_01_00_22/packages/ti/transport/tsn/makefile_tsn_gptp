#
# This file is the makefile for building gptp library.
#
ifeq ($(RULES_MAKE), )
include $(PDK_INSTALL_PATH)/ti/build/Rules.make
else
include $(RULES_MAKE)
endif

MODULE_NAME = tsn_gptp

SRCDIR = tsn_gptp tsn_gptp/tilld
INCDIR = tsn_gptp

SRC_PATH := $(PDK_TSN_COMP_PATH)/tsn-stack/tsn_gptp
# UB_VERSION = $(shell sed -n '/AC_INIT/p' $(SRC_PATH)/configure.ac | awk -F"[][]" '{print $$4}')
UB_VERSION = 1.1.4
TSNPKGVERSION := $(UB_VERSION)-jacinto

# List all the external components/interfaces, whose interface header files
# need to be included for this component
INCLUDE_INTERNAL_INTERFACES =
INCLUDE_EXTERNAL_INTERFACES = pdk tsn_unibase tsn_combase

# Common source files and CFLAGS across all platforms and cores
SRCS_COMMON += announce_interval_setting_sm.c \
	clock_master_sync_offset_sm.c \
	clock_master_sync_receive_sm.c \
	clock_master_sync_send_sm.c \
	clock_slave_sync_sm.c \
	gm_stable_sm.c \
	gptp_capable_receive_sm.c \
	gptp_capable_transmit_sm.c \
	gptp2_debug_defs.c \
	gptpclock.c \
	gptpcommon.c \
	gptpman.c \
	gptpmasterclock.c \
	link_delay_interval_setting_sm.c \
	md_abnormal_hooks.c \
	md_announce_receive_sm.c \
	md_announce_send_sm.c \
	md_pdelay_req_sm.c \
	md_pdelay_resp_sm.c \
	md_signaling_receive_sm.c \
	md_signaling_send_sm.c \
	md_sync_receive_sm.c \
	md_sync_send_sm.c \
	mdeth.c \
	mind.c \
	one_step_tx_oper_setting_sm.c \
	port_announce_information_ext_sm.c \
	port_announce_information_sm.c \
	port_announce_receive_sm.c \
	port_announce_transmit_sm.c \
	port_state_selection_sm.c \
	port_state_setting_ext_sm.c \
	port_sync_sync_receive_sm.c \
	port_sync_sync_send_sm.c \
	site_sync_sync_sm.c \
	sync_interval_setting_sm.c \
	gptp_config.c \
	lld_gptpnet.c \
	lld_gptpclock.c \
	lld_ptpdevclock.c

PACKAGE_SRCS_COMMON = ../tsn_component.mk ../makefile_tsn_gptp
PACKAGE_SRCS_COMMON += $(SRCDIR)
CFLAGS_LOCAL_COMMON = $(PDK_CFLAGS) $(TSN_CFLAGS) -DTSNPKGVERSION=\"$(TSNPKGVERSION)\" \
	-include $(PDK_TSN_COMP_PATH)/tsn-stack/tsn_tilld_include.h \
	-include $(SRC_PATH)/tilld/lld_gptp_private.h

# Core/SoC/platform specific source files and CFLAGS
# Example:
#   SRCS_<core/SoC/platform-name> =
#   CFLAGS_LOCAL_<core/SoC/platform-name> =

# Include common make files
ifeq ($(MAKERULEDIR), )
  #Makerule path not defined, define this and assume relative path from ROOTDIR
  MAKERULEDIR := $(ROOTDIR)/ti/build/makerules
  export MAKERULEDIR
endif

include $(MAKERULEDIR)/common.mk

# OBJs and libraries are built by using rule defined in rules_<target>.mk
#     and need not be explicitly specified here

# Nothing beyond this point
