 
var System = xdc.useModule('xdc.runtime.System');
var Memory = xdc.useModule('xdc.runtime.Memory');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var System = xdc.useModule('xdc.runtime.System');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var TimeStamp = xdc.useModule('xdc.runtime.Timestamp');


var devType="k2g"
var osType ="tirtos"

var Osal= xdc.useModule('ti.osal.Settings');
Osal.osType = osType;
Osal.socType = devType;
Osal.libProfile = "release" 

var Csl = xdc.useModule('ti.csl.Settings');
Csl.deviceType = devType;
/*
var Pa = xdc.useModule ('ti.drv.pa.Settings');
Pa.deviceType = "k2g";
*/
var Qmss = xdc.loadPackage('ti.drv.qmss');
var Cppi = xdc.loadPackage('ti.drv.cppi');
var Sa = xdc.useModule ('ti.drv.sa.Settings');
Sa.deviceType = "k2g";

/* Create default heap and hook it into Memory */
var heapMemParams = new HeapMem.Params;
heapMemParams.size = 16384*12;
var heap0 = HeapMem.create(heapMemParams);

Memory.defaultHeapInstance = heap0;

Clock.timerId = 0;
System.SupportProxy = SysMin;
var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');

var Cache  = xdc.useModule('ti.sysbios.family.arm.a15.Cache');
var Mmu    = xdc.useModule('ti.sysbios.family.arm.a15.Mmu');

/* Enable the cache                                                           */
Cache.enableCache = true;

// Enable the MMU (Required for L1/L2 data caching)
Mmu.enableMMU = true;

// descriptor attribute structure
var peripheralAttrs = new Mmu.DescriptorAttrs();

Mmu.initDescAttrsMeta(peripheralAttrs);

peripheralAttrs.type = Mmu.DescriptorType_BLOCK;  // BLOCK descriptor
peripheralAttrs.noExecute = true;                 // not executable
peripheralAttrs.accPerm = 0;                      // read/write at PL1
peripheralAttrs.attrIndx = 1;                     // MAIR0 Byte1 describes
                                                  // memory attributes for
// Define the base address of the 2 MB page
// the peripheral resides in.
var peripheralBaseAddrs = [ 
  { base: 0x02620000, size: 0x00001000 },  // bootcfg
  { base: 0x0bc00000, size: 0x00100000 },  // MSMC config  
  { base: 0x04000000, size: 0x01000000 },  // NAVSS memory
  { base: 0x4ae00000, size: 0x00100000 },  // PRM
  { base: 0x02900000, size: 0x00100000 }   // PMM  
];

// Configure the corresponding MMU page descriptor accordingly
for (var i =0; i < peripheralBaseAddrs.length; i++)
{
  for (var j = 0; j < peripheralBaseAddrs[i].size; j += 0x200000)
  {
      var addr = peripheralBaseAddrs[i].base + j;
      Mmu.setSecondLevelDescMeta(addr, addr, peripheralAttrs);
    }
}                   

// Reconfigure DDR to use coherent address
Mmu.initDescAttrsMeta(peripheralAttrs);

peripheralAttrs.type = Mmu.DescriptorType_BLOCK;
peripheralAttrs.shareable = 2;            // outer-shareable (3=inner, 0=none)
peripheralAttrs.accPerm = 1;              // read/write at any privelege level
peripheralAttrs.attrIndx = 2;             // normal cacheable (0=no cache, 1=strict order)
for (var vaddr = 0x80000000, paddr = 0x800000000; vaddr < 0x100000000; vaddr += 0x200000, paddr+= 0x200000)
{
       Mmu.setSecondLevelDescMeta(vaddr, paddr, peripheralAttrs);
 }
// Add MSMC as coherent
 for (var addr = 0x0c000000; addr < 0x0c600000; addr += 0x200000)
 {
       Mmu.setSecondLevelDescMeta(addr, addr, peripheralAttrs);
 }

